// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
INSERT INTO feed_follows (user_id, feed_id)
VALUES (
    $1,
    $2
)
RETURNING feed_follows.id, feed_follows.created_at, feed_follows.updated_at, feed_follows.user_id, feed_follows.feed_id,
(SELECT name FROM users WHERE users.id = feed_follows.user_id) AS user_name,
(SELECT name FROM feeds WHERE feeds.id = feed_follows.feed_id) AS feed_name
`

type CreateFeedFollowParams struct {
	UserID uuid.UUID
	FeedID int32
}

type CreateFeedFollowRow struct {
	ID        int32
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    int32
	UserName  string
	FeedName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow, arg.UserID, arg.FeedID)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const getFeedFollows = `-- name: GetFeedFollows :many
SELECT u.name as user_name, f.name as feed_name, f.url as url
FROM feed_follows ff
JOIN users as u ON u.id = ff.user_id
JOIN feeds as f ON f.id = ff.feed_id
WHERE ff.user_id = $1
`

type GetFeedFollowsRow struct {
	UserName string
	FeedName string
	Url      string
}

func (q *Queries) GetFeedFollows(ctx context.Context, userID uuid.UUID) ([]GetFeedFollowsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollows, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsRow
	for rows.Next() {
		var i GetFeedFollowsRow
		if err := rows.Scan(&i.UserName, &i.FeedName, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
